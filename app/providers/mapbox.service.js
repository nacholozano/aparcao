"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
require("rxjs/add/operator/map");
var TravelPoints = /** @class */ (function () {
    function TravelPoints() {
    }
    return TravelPoints;
}());
var RouteObject = /** @class */ (function () {
    function RouteObject() {
    }
    return RouteObject;
}());
var RouteLeg = /** @class */ (function () {
    function RouteLeg() {
    }
    return RouteLeg;
}());
var RouteStep = /** @class */ (function () {
    function RouteStep() {
    }
    return RouteStep;
}());
var Intersection = /** @class */ (function () {
    function Intersection() {
    }
    return Intersection;
}());
var Routes = /** @class */ (function () {
    function Routes() {
    }
    return Routes;
}());
var MapboxService = /** @class */ (function () {
    function MapboxService(_http) {
        this._http = _http;
        this._api = 'https://api.mapbox.com/directions/v5/mapbox/driving/';
        this._token = 'pk.eyJ1IjoibmFjaG8xMjM0MzI0MjM0IiwiYSI6ImNqZDNqN25kYTExemwycXFqbmRmdTNsc2QifQ.CInjKy5qEWs39L-gy_Aepg';
    }
    MapboxService.prototype.getDirections = function (travelPoints) {
        var points = [];
        return this._http
            .get(this._api + this._getStartAndFinish(travelPoints) + '?steps=true&access_token=' + this._token)
            .map(function (data) {
            data.routes[0].legs[0].steps.forEach(function (step) {
                step.intersections.forEach(function (intersection) {
                    points.push({
                        lat: intersection.location[1],
                        lng: intersection.location[0]
                    });
                });
            });
            return points;
        });
    };
    MapboxService.prototype.getDistance = function (travelPoints) {
        return this._http
            .get(this._api + this._getStartAndFinish(travelPoints) + '?access_token=' + this._token)
            .map(function (data) {
            return data.routes[0].distance;
        });
    };
    MapboxService.prototype._getStartAndFinish = function (travelPoints) {
        var start = travelPoints.start.lng + ',' + travelPoints.start.lat;
        var finish = travelPoints.finish.lng + ',' + travelPoints.finish.lat;
        return start + ';' + finish;
    };
    MapboxService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], MapboxService);
    return MapboxService;
}());
exports.MapboxService = MapboxService;
//# sourceMappingURL=data:application/json;base64,